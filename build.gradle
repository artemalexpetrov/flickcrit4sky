plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.flickcrit'
version = '0.0.1-SNAPSHOT'
description = 'FlickCrit'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

springBoot {
    mainClass = 'com.flickcrit.app.FlickCritApplication'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

repositories {
    mavenCentral()
}

ext {
    mapstructVersion = '1.6.2'
    mapstructSpringExtensionsVersion = '1.1.3'
    hypersistanceUtilsVersion = '3.11.0'
    jjwtVersion = '0.13.0'
    passayVersion = '1.6.6'
    springDocVersion = '2.8.13'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.liquibase:liquibase-core'
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    implementation "org.mapstruct.extensions.spring:mapstruct-spring-annotations:${mapstructSpringExtensionsVersion}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "io.hypersistence:hypersistence-utils-hibernate-63:${hypersistanceUtilsVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-api:${springDocVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springDocVersion}"
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    implementation "org.passay:passay:${passayVersion}"

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testCompileOnly 'org.projectlombok:lombok'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:${mapstructSpringExtensionsVersion}"
    testAnnotationProcessor "org.projectlombok:lombok"
    testAnnotationProcessor "org.mapstruct.extensions.spring:mapstruct-spring-extensions:${mapstructSpringExtensionsVersion}"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
}


sourceSets {
    integrationTest {
        java.srcDir 'src/test/it'
        resources.srcDir 'src/test/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}


test {
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
    }
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter test
    useJUnitPlatform() {
        filter {
            includeTestsMatching '*IT'
        }
    }
    jacoco {
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
    }
}


tasks.register('jacocoMergedReport', JacocoReport) {
    group = 'verification'
    executionData files(
      layout.buildDirectory.file("jacoco/test.exec").get().asFile,
      layout.buildDirectory.file("jacoco/integrationTest.exec").get().asFile
    )
    sourceSets sourceSets.main
    reports {
        xml.required = true
        csv.required = true
    }
}

check.dependsOn integrationTest
